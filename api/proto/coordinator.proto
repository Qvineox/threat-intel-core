syntax = "proto3";
package proto;

import "google/protobuf/empty.proto";
import "fleet.proto";
import "options.proto";
import "auth.proto";

option go_package = "threat-intel-core/api/proto/services";

// protoc --go_out=../services --go_opt=paths=source_relative --go-grpc_out=../services --go-grpc_opt=paths=source_relative coordinator.proto

service Coordinator {
  // procedure allows bot to register itself in a system
  rpc Register(BotRegistrationData) returns (BotRegistrationConfirmMessage);

  // procedure established bidirectional connection that allow bot to collect jobs from coordinator
  rpc Connect(stream BotState) returns (stream JobStream);

  rpc GetFleet(FleetQueryFilter) returns (Fleet);

  rpc CreateCluster(Cluster) returns (Cluster);
}

message JobStream {
  oneof Options {
    PingOptions Ping = 1;
  }
}

message BotRegistrationData {
  string Identity = 1;
  BotType Type = 2;

  optional AuthToken Token = 3;

  // BotRegistrationData has to contain BotToken in metadata
}

message BotRegistrationConfirmMessage {
  string Subject = 1;
}