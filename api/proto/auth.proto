syntax = "proto3";
package proto;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "user.proto";

option go_package = "threat-intel-core/api/proto/services";

// protoc --go_out=../services --go_opt=paths=source_relative --go-grpc_out=../services --go-grpc_opt=paths=source_relative auth.proto
// protoc --grpc-gateway_out=../services --grpc-gateway_opt=paths=source_relative --grpc-gateway_opt=generate_unbound_methods=true auth.proto
// protoc --openapiv2_out=../openapi auth.proto

service AuthService {
  rpc Login(LoginMessage) returns (Tokens) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  };

  rpc Logout(AuthToken) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
    };
  };

  rpc Refresh(RefreshToken) returns (Tokens) {
    option (google.api.http) = {
      post: "/v1/auth/refresh"
    };
  };

  rpc Me(google.protobuf.Empty) returns (User) {
    option (google.api.http) = {
      post: "/v1/auth/me"
    };
  };

  rpc CreateBotToken(AuthTokenOptions) returns (AuthToken) {
    option (google.api.http) = {
      post: "/v1/auth/token/bot"
    };
  }

  rpc CreateClientToken(AuthTokenOptions) returns (AuthToken) {
    option (google.api.http) = {
      post: "/v1/auth/token/client"
    };
  }

  rpc CreateAdminToken(AuthTokenOptions) returns (AuthToken) {
    option (google.api.http) = {
      post: "/v1/auth/token/admin"
    };
  }
}

message LoginMessage {
  string Username = 1;
  string Password = 2;
}

message Tokens {
  RefreshToken Refresh = 1;
  AuthToken Auth = 2;
}

message RefreshToken {
  string JWT = 1;
}

message AuthToken {
  string JWT = 1;
}

message AuthTokenOptions {
  string Subject = 1;

  optional Permissions Permissions = 2;
  google.protobuf.Timestamp ExpiresAt = 3;
}

message Permissions {
  UserPermissions User = 1;
  AdminPermissions Admin = 2;
  BotPermissions Bot = 3;
}

message UserPermissions {}

message AdminPermissions {}

message BotPermissions {}