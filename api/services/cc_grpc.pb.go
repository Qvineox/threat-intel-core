// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: cc.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlCenter_GetFleet_FullMethodName      = "/proto.ControlCenter/GetFleet"
	ControlCenter_CreatePingJob_FullMethodName = "/proto.ControlCenter/CreatePingJob"
	ControlCenter_GetJobs_FullMethodName       = "/proto.ControlCenter/GetJobs"
)

// ControlCenterClient is the client API for ControlCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlCenterClient interface {
	GetFleet(ctx context.Context, in *FleetQueryFilter, opts ...grpc.CallOption) (*Fleet, error)
	CreatePingJob(ctx context.Context, in *PingOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetJobs(ctx context.Context, in *JobsQueryFilter, opts ...grpc.CallOption) (*Jobs, error)
}

type controlCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewControlCenterClient(cc grpc.ClientConnInterface) ControlCenterClient {
	return &controlCenterClient{cc}
}

func (c *controlCenterClient) GetFleet(ctx context.Context, in *FleetQueryFilter, opts ...grpc.CallOption) (*Fleet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Fleet)
	err := c.cc.Invoke(ctx, ControlCenter_GetFleet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlCenterClient) CreatePingJob(ctx context.Context, in *PingOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ControlCenter_CreatePingJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlCenterClient) GetJobs(ctx context.Context, in *JobsQueryFilter, opts ...grpc.CallOption) (*Jobs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Jobs)
	err := c.cc.Invoke(ctx, ControlCenter_GetJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlCenterServer is the server API for ControlCenter service.
// All implementations must embed UnimplementedControlCenterServer
// for forward compatibility.
type ControlCenterServer interface {
	GetFleet(context.Context, *FleetQueryFilter) (*Fleet, error)
	CreatePingJob(context.Context, *PingOptions) (*emptypb.Empty, error)
	GetJobs(context.Context, *JobsQueryFilter) (*Jobs, error)
	mustEmbedUnimplementedControlCenterServer()
}

// UnimplementedControlCenterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlCenterServer struct{}

func (UnimplementedControlCenterServer) GetFleet(context.Context, *FleetQueryFilter) (*Fleet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFleet not implemented")
}
func (UnimplementedControlCenterServer) CreatePingJob(context.Context, *PingOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePingJob not implemented")
}
func (UnimplementedControlCenterServer) GetJobs(context.Context, *JobsQueryFilter) (*Jobs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedControlCenterServer) mustEmbedUnimplementedControlCenterServer() {}
func (UnimplementedControlCenterServer) testEmbeddedByValue()                       {}

// UnsafeControlCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlCenterServer will
// result in compilation errors.
type UnsafeControlCenterServer interface {
	mustEmbedUnimplementedControlCenterServer()
}

func RegisterControlCenterServer(s grpc.ServiceRegistrar, srv ControlCenterServer) {
	// If the following call pancis, it indicates UnimplementedControlCenterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlCenter_ServiceDesc, srv)
}

func _ControlCenter_GetFleet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FleetQueryFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlCenterServer).GetFleet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlCenter_GetFleet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlCenterServer).GetFleet(ctx, req.(*FleetQueryFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlCenter_CreatePingJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlCenterServer).CreatePingJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlCenter_CreatePingJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlCenterServer).CreatePingJob(ctx, req.(*PingOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlCenter_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobsQueryFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlCenterServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlCenter_GetJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlCenterServer).GetJobs(ctx, req.(*JobsQueryFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlCenter_ServiceDesc is the grpc.ServiceDesc for ControlCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ControlCenter",
	HandlerType: (*ControlCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFleet",
			Handler:    _ControlCenter_GetFleet_Handler,
		},
		{
			MethodName: "CreatePingJob",
			Handler:    _ControlCenter_CreatePingJob_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _ControlCenter_GetJobs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cc.proto",
}
