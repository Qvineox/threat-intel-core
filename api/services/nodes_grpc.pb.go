// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.1
// source: nodes.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PingerBotClient is the client API for PingerBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PingerBotClient interface {
	StartScan(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (PingerBot_StartScanClient, error)
}

type pingerBotClient struct {
	cc grpc.ClientConnInterface
}

func NewPingerBotClient(cc grpc.ClientConnInterface) PingerBotClient {
	return &pingerBotClient{cc}
}

func (c *pingerBotClient) StartScan(ctx context.Context, in *ScanOptions, opts ...grpc.CallOption) (PingerBot_StartScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &PingerBot_ServiceDesc.Streams[0], "/proto.PingerBot/StartScan", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingerBotStartScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingerBot_StartScanClient interface {
	Recv() (*PingScanResult, error)
	grpc.ClientStream
}

type pingerBotStartScanClient struct {
	grpc.ClientStream
}

func (x *pingerBotStartScanClient) Recv() (*PingScanResult, error) {
	m := new(PingScanResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingerBotServer is the server API for PingerBot service.
// All implementations must embed UnimplementedPingerBotServer
// for forward compatibility
type PingerBotServer interface {
	StartScan(*ScanOptions, PingerBot_StartScanServer) error
	mustEmbedUnimplementedPingerBotServer()
}

// UnimplementedPingerBotServer must be embedded to have forward compatible implementations.
type UnimplementedPingerBotServer struct {
}

func (UnimplementedPingerBotServer) StartScan(*ScanOptions, PingerBot_StartScanServer) error {
	return status.Errorf(codes.Unimplemented, "method StartScan not implemented")
}
func (UnimplementedPingerBotServer) mustEmbedUnimplementedPingerBotServer() {}

// UnsafePingerBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PingerBotServer will
// result in compilation errors.
type UnsafePingerBotServer interface {
	mustEmbedUnimplementedPingerBotServer()
}

func RegisterPingerBotServer(s grpc.ServiceRegistrar, srv PingerBotServer) {
	s.RegisterService(&PingerBot_ServiceDesc, srv)
}

func _PingerBot_StartScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingerBotServer).StartScan(m, &pingerBotStartScanServer{stream})
}

type PingerBot_StartScanServer interface {
	Send(*PingScanResult) error
	grpc.ServerStream
}

type pingerBotStartScanServer struct {
	grpc.ServerStream
}

func (x *pingerBotStartScanServer) Send(m *PingScanResult) error {
	return x.ServerStream.SendMsg(m)
}

// PingerBot_ServiceDesc is the grpc.ServiceDesc for PingerBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PingerBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PingerBot",
	HandlerType: (*PingerBotServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartScan",
			Handler:       _PingerBot_StartScan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nodes.proto",
}
