stages:
  - build
  - test
  - deploy
  - publish

.go-cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod/
      - go.sum

.dind_build_setup:
  image: docker:24.0.5
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  services:
    - name: docker:24.0.5-dind
      alias: docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  tags:
    - docker-in-docker

include:
  - template: Security/SAST.gitlab-ci.yml

unit tests:
  stage: test
  image: golang:1.22.5
  only:
    refs:
      - main
      - test
  environment:
    name: Test
  extends:
    - .go-cache
  script:
    - go mod tidy
    - go get gotest.tools/gotestsum@latest

    - cd test
    - go run gotest.tools/gotestsum --junitfile report.xml
    - go test $(go list ./... | grep -v /vendor/) -v -coverprofile .testCoverage.txt
  artifacts:
    reports:
      junit: report.xml
    expire_in: 2 days
    when: always

# tests for releasing version
unit tests for release:
  stage: test
  image: golang:1.22.5
  only:
    refs:
      - tags
  environment:
    name: Test
  extends:
    - .go-cache
  script:
    - go mod tidy
    - go get gotest.tools/gotestsum@latest
    - cd test
    - go run gotest.tools/gotestsum --junitfile report.xml
  artifacts:
    reports:
      junit: report.xml
    expire_in: 2 days
    when: always

# publishing only tagged builds
publish package:
  stage: publish
  image: alpine/curl:latest
  only:
    refs:
      - tags
  needs:
    - job: unit tests for release
  variables:
    PACKAGE_NAME: 'threat-intel-core'
    VERSION: ${CI_COMMIT_TAG:1}
  script:
    - echo ${CI_COMMIT_TAG:1}
    - |
      tar -czvf $PACKAGE_NAME.$VERSION.tar.gz .
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${PACKAGE_NAME}.${VERSION}.tar.gz ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${VERSION}/${PACKAGE_NAME}.${VERSION}.tar.gz

