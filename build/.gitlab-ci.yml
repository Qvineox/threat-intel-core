stages:
  - build
  - test
  - release
  - publish

.go_cache:
  variables:
    GOPATH: $CI_PROJECT_DIR/.go
  before_script:
    - mkdir -p .go
  cache:
    paths:
      - .go/pkg/mod/
      - go.sum

.dind_build_setup:
  image: docker:28.0.1
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  services:
    - name: docker:28.0.1-dind
      alias: docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  tags:
    - docker-in-docker

unit_tests:
  stage: test
  image: golang:1.24.0
  rules:
    - if: $CI_COMMIT_TAG
  environment:
    name: Test
  extends:
    - .go_cache
  script:
    - mkdir test/tls
    - touch test/tls/certificate.crt
    - echo ${TLS_CRT_FILE} >> test/tls/certificate.crt
    - touch test/tls/certificate.key
    - echo ${TLS_KEY_FILE} >> test/tls/certificate.key

    - go mod tidy
    - go run gotest.tools/gotestsum@latest --junitfile report.xml --format testname

    - go test -v -coverprofile=profile.cov ./...
    - go tool cover -func profile.cov
  coverage: '/\(statements\)(?:\s+)?(\d+(?:\.\d+)?%)/'
  artifacts:
    reports:
      junit: report.xml
    expire_in: 2 days
    when: always

trivy_filesystem_scan:
  stage: test
  allow_failure: false
  image:
    name: aquasec/trivy:latest
    entrypoint: [ "" ]
  rules:
    - if: $CI_COMMIT_TAG
  environment:
    name: Test
  variables:
    GIT_STRATEGY: none

    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"

    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    TRIVY_INSECURE: "true"
  script:
    # trivy preparation: cache cleanup, vulnerability database update
    - trivy -v
    - trivy image --download-db-only --no-progress --cache-dir .trivycache/

    # search for critical and high vulnerabilities and configuration errors, saving to a file in GitLab format
    - trivy
      --cache-dir .trivycache/
      --scanners vuln,misconfig,secret,license
      --timeout 15m
      --format json
      --output "$CI_PROJECT_DIR/trivy_report_full.json"
      fs .

    # formatting the original trivy scan file into all formats required for work
    - trivy convert --format spdx-json --output gl-sbom-report.cdx.json "$CI_PROJECT_DIR/trivy_report_full.json"
    - trivy convert --format table --output trivy_report_full.txt "$CI_PROJECT_DIR/trivy_report_full.json"
    - trivy convert --format template --template "@/contrib/gitlab.tpl" --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$CI_PROJECT_DIR/trivy_report_full.json"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    expire_in: 2 week
    paths:
      - "$CI_PROJECT_DIR/gl-container-scanning-report.json"
      - "$CI_PROJECT_DIR/gl-sbom-report.cdx.json"
      - "$CI_PROJECT_DIR/trivy_report_full.json"
      - "$CI_PROJECT_DIR/trivy_report_full.txt"
    reports:
      container_scanning: gl-container-scanning-report.json
      cyclonedx: gl-sbom-report.cdx.json

# ref: https://docs.gitlab.com/ee/ci/yaml/#release for available properties    
# release only tagged builds
release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    # PACKAGE_NAME: 'threat-intel-core'
    VERSION: ${CI_COMMIT_TAG:1}
  script:
    - echo "Running the release job."
  release:
    tag_name: ${CI_COMMIT_TAG}
    name: 'Release ${CI_COMMIT_TAG}'
    description: '${CI_COMMIT_MESSAGE}'

# publishing only tagged builds
publish package:
  stage: publish
  image: alpine/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    PACKAGE_NAME: 'threat-intel-core'
    VERSION: ${CI_COMMIT_TAG:1}
  before_script:
    - export VERSION=${CI_COMMIT_TAG:1}
    - export PACKAGE_FILE_NAME=${PACKAGE_NAME}.${VERSION}.tar.gz
  script:
    - tar -czf ${PACKAGE_FILE_NAME} .
    - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ${PACKAGE_NAME}.${VERSION}.tar.gz ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${VERSION}/${PACKAGE_FILE_NAME}'
